#!/bin/sh

#
# SM date module API
#
# dates start {date} end {date} [step {step}] [format "%Y-%m-%dT%H:%I:%S]
#
# where {step} is one of {minute,hour,day,week,month,year}
#
dates()
{
  true ${date_format:="%Y-%m-%dT%H:%M:%S"}

  typeset _start _end _date _step _format_in _format_out
  _step="day"
  _format_in="%Y-%m-%d"
  _format_out="%Y-%m-%d"

  while (( $# > 0 ))
  do
    _token="$1" && shift
    case "${_token}" in
      (step)
        _step="${1:-}"
        (( $# )) && shift || __sm.log.fail "step must follow keyword 'step'"
        ;;
      (format_in)
        _format_in="${1}"
        (( $# )) && shift || __sm.log.fail "input format must follow keyword 'format_in'"
        ;;
      (format|format_out)
        _format_out="${1}"
        (( $# )) && shift || __sm.log.fail "output format must follow keyword 'format[_out]'"
        ;;
      (start)
        _start="${1}"
        (( $# )) && shift || __sm.log.fail "start must follow keyword 'start'"
        ;;
      (end)
        _end="${1}"
        (( $# )) && shift || __sm.log.fail "end must follow keyword 'end'"
        ;;
      (*)
        if [[ -z "${_start}" ]]
        then
          _start="${_token}"
        elif [[ -z "${_end}" ]]
        then
          _end="${_token}"
        else
          __sm.log.fail "Unknown token '${_token}' passed as a parameter."
        fi
        ;;
    esac
  done

  [[ -n "${_start}" ]] || __sm.log.fail "start date must be specified."
  [[ -n "${_end}" ]]   || __sm.log.fail "end date must be specified."

  case "${_step}" in
    (minute)
      _step=60
      ;;
    (hour)
      _step=3600
      ;;
    (day)
      _step=86400
      ;;
    (week)
      _step=604800
      ;;
    (month)
      _step=2629743
      ;;
    (year)
      _step=31556926
      ;;
    (*)
      __sm.log.fail "Unknown step token ${1:-};"\
        " valid steps are {minute,hour,day,week,month,year}."
      ;;
  esac

  _start=$(date -j -f "${_format_in}" ${_start} "+%s") ||
    __sm.log.fail "Date error: "\
    " Input format '${_format_in}' for start date '${_start}'."

  _end=$(date -j -f "${_format_in}" ${_end} "+%s") ||
    __sm.log.fail "Date error: "\
    "Input format '${_format_in}' for end date '${_end}'."

  while (( _start <= _end ))
  do
    _date=$(date -r ${_start} "+${_format_out}") ||
      __sm.log.fail "Date error: "\
      "Output format '${_format_out}' for date '${_start}'."

    printf "%s\n" "${_date}"
    _date=$(date -j -f "${_format_out}" ${_date} "+%s" 2>/dev/null)
    (( _start = _date + _step ))
  done
}

