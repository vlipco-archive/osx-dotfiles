#!/bin/sh

# Print out a list of all installed modules.
# ## modules\_installed()
modules_installed()
{
  typeset _module
  for _module in "${__sm_modules_path}"/*
  do
    [[ -d "${_module}" ]] || continue
    printf "%s\n" "${_module##*/}"
  done
}

module_functions()
{
  typeset _function _functions _modules _path
  _modules="${@:-}"

  [[ -n "${_modules}" ]] ||
    __sm.log.fail "Cannot print the functions for module(s); No module names given."

  _path="${__sm_modules_path}/${_module}"

  _functions=($(
    find "${_path}" -mindepth 1 -maxdepth 1 -name functions -type f -print0 |
    xargs -0 grep '^[a-z_]*()$' 2>/dev/null || true
  ))

  for _function in "${_functions[@]}"
  do
    _function="${_function##*modules\/shell\/}"
    printf "%s\n" "${_function//*:}"
  done
}

modules_list()
{
  typeset _module _modules _function _functions

  for language in shell ruby
  do
    _modules=($(modules_installed ${language}))
    for _module in "${_modules[@]}"
    do
      printf "\n%s\n\n" "${_module}"
      _functions=($(module_functions "${_module}"))
      for _function in "${_functions[@]}"
      do
        printf "%s\n" "  ${_function}"
      done
    done
  done
}

module_docs()
{
  typeset _function _functions _module content_flag table_flag

  while (( $# > 0 ))
  do
    token="$1"
    shift
    case "${token}" in
      --content)
        content_flag=1
        ;;
      --table)
        table_flag=1
        ;;
      *)
        _module="$token"
    esac
  done

  variables are nonempty _module ||
    __sm.log.fail "Cannot glean documentation for a module; no module name given."

  command exists shocco ||
    __sm.log.fail "Cannot generate documentation for '${_module}';"\
    " 'shocco' was not found in the PATH, install shocco and try again."

  command exists pygmentize ||
    __sm.log.fail "Cannot generate documentation for '${_module}';"\
      " 'pygmentize' was not found in the PATH, install pygmentize and try again."

  typeset _path
  _path="${core_development_path}/shell/${_module}"
  if (( content_flag == 1 ))
  then
    shocco "${_path}/functions" |
      awk '/<body>/{p=1;next;} /\/body>/{p=0;next;} {if (p == 1) print ; } '
  elif (( table_flag == 1 ))
  then
    shocco "${_path}/functions" |
      awk '/<table/{p=1;} {if (p == 1) print ; } /\/table>/{p=0;} '
  else
    shocco "${_path}/functions"
  fi
}

modules_docgen()
{
  # TODO: Replace with,
  # for file in modules/*/functions ; do (name=${file%%\/functions}; shocco $file > html/${name//*\/}.html)& done ; wait

  typeset _module _function _functions _name _prefix _path
  _prefix="${core_development_path}/html/shell"
  _path="${site_development_path}"

  if [[ -n "${core_development_path}" ]]
  then
    paths exists "${core_development_path}" ||
    __sm.log.error "Set core_development_path in ~/.smrc, and clone the sm core "\
     "repository into it, to run docgen."\
     "For more information, see https://smf.sh/development/core."
  fi

  paths create "${_prefix}"

  files write string "<html><body><h2>SM Module Documentation</h2><ul>" \
    to "${_prefix}/index.html"

  for _module in "${core_development_path}"/shell/*
  do
    [[ -d "${_module}" ]] || continue
    _name="${_module##*/}"
    (
    _base="${_prefix}/${_name}"
    log "Generating ${_base}.html"
    module_docs "${_name}" > "${_base}.html"

    files write append \
      string "<li><a href=\"./${_name}.html\">${_name}</a></li>" \
      to "${_prefix}/index.html"

    # Replace the shocco generated css url with a local filesystem css file,
    # so that a network request is not required in order to have styling when
    # viewing the documentation offline.
    files replace \
      string "http://jashkenas.github.com/docco/resources/docco" \
      with "../css/shocco" \
      in "${_base}.html"
    )&
  done
  wait

  files write append string "  </ul></body></html>" to "${_prefix}/index.html"

  log "Modules documentation content generated in ${_prefix}."
}

# ## modules_docopen()
modules_docopen()
{
  # TODO: Replace with,
  # for file in modules/*/functions ; do (name=${file%%\/functions}; shocco $file > html/${name//*\/}.html)& done ; wait
  variables are nonempty core_development_path &&
    paths exists "${core_development_path}" ||
    __sm.log.error "To run docopen, set core_development_path in ~/.smrc, and clone the sm core "\
    "repository into it."

  files exist "${core_development_path}/html/shell/index.html" ||
    __sm.log.error "Run '$ sm mod docgen' before trying docopen."

  os open "${core_development_path}/html/shell/index.html"
}

# ## modules_site_docopen()
modules_site_docgen()
{
  # TODO: Replace with,
  # for file in modules/*/functions ; do (name=${file%%\/functions}; shocco $file > html/${name//*\/}.html)& done ; wait

  typeset _module _function _functions _name _file _prefix _path
  _prefix="${core_development_path}/html/shell"
  _path="${site_development_path}"

  paths exists "${core_development_path}" ||
    __sm.log.fail "Set core_development_path in ~/.smrc, to run docgen."

  files write string "<html><body><h2>SM Module Documentation</h2><ul>" \
    to "${_prefix}/index.html"

  for _module in "${core_development_path}"/shell/*
  do
    [[ -d "${_module}" ]] || continue
    _name="${_module##*/}"
    (
    paths create "${_prefix}/${_name}"
    _base="${_prefix}/${_name}"
    log "Generating ${_base}.html"
    module_docs "${_name}" > "${_base}.html"
    log "<li><a href=\"./${_name}.html\">${_name}</a></li>" \
      >> "${_prefix}/index.html"
    )&
  done
  wait
  log "  </ul></body></html>" >> "${_prefix}/index.html"
  log "Modules documentation content has been generated in ${_prefix}."

  paths exists "${site_development_path}" ||
    __sm.log.fail "Set site_development_path in ~/.smrc, to run docgen."

  # TODO: Extract this section into a separate location.
  # Copy the generated files into the proper site content dir.
  for _file in "${_prefix}"/*.haml
  do
    (
    name=${_file##*\/}
    name=${name%.haml}

    paths create "${site_development_path}/content/shell/${name}"

    log "Building ${name} functions from generated docs."
    cat > "${site_development_path}/content/shell/${name}/functions.haml" <<Header
  .breadcrumbs
    %a{ :href => "/" }
      Documentation
    &nbsp;>&nbsp;
    %a{ :href => "/shell/" }
      Modules
    &nbsp;>&nbsp;
    %a{ :href => "/shell/${name}/" }
      ${name}
    &nbsp;>&nbsp;
    %a{ :href => "/shell/${name}/functions/" }
      functions API :: ${name}
    %hr

  %h1
    Module ${name}

Header
    cat $_file >> "${site_development_path}/content/shell/${name}/functions.haml"

    html2haml "${_base}.html" \
      >> "${site_development_path}/content/shell/${name}/functions.haml"
    )&
  done

  wait

  log "Module documentation generated from the source code path: ${core_development_path}"
  log "into the site development path: ${site_development_path}."
}
