#!/bin/sh

# ## git\_get()
#
#
#
# Code Walkthrough
git_get()
{
  typeset initial_pwd _uri _final_target branch remote revision _target _uri_https
  initial_pwd="$PWD"
  _uri="${1:-}"
  # place/dir where user wishes to see output
  _final_target="${2:-}"
  branch=${3:-master}
  remote=${4:-origin}
  revision=${5:-HEAD}

  (( $# )) && shift || __sm.log.fail "url must be the first parameter to git_get()."
  (( $# )) && shift || __sm.log.fail "target path must be the second parameter to git_get()."

  __sm.command.exists git ||
    __sm.log.error "'git' was not found, please install git and try again.\n"\
    "Note that git can be installed from the tools extension set:\n"\
    "sm sets install vcs ; sm git install"

  # internal directory to check out sources
  _target="${scm_path}/$( scm_identifier "${_uri}" )"

  _final_target=$(
    # Starting point in case of relative _final_target
    builtin cd "${initial_pwd}"
    # Ensure _final_target exists in filesystem
    mkdir -p "${_final_target}"
    # go to _final_target
    builtin cd "${_final_target}"
    # so we can print the full path for _final_target
    pwd
  )

  # TODO: Account for revision
  if [[ -d "$_target/.git" ]]
  then
    builtin cd "${_target}"
    git checkout master -f -q >/dev/null 2>&1
    git reset --hard HEAD >/dev/null 2>&1
    git fetch ${remote} >/dev/null 2>&1
    if [[ -z "$(git branch --no-color | awk "/${branch}\$/" 2>/dev/null)" ]]
    then
      if ! (
        builtin cd "${repo_path}"
        git checkout -b "${branch}" --track "${remote}/${branch}" 2>&1 >/dev/null
        )
      then
        fetch_error remote_branch_not_found
      fi
    elif [[ -z "$(git branch --no-color | awk "/\* $branch\$/{print \$2}" 2>/dev/null)" ]]
    then
      if ! (
        builtin cd "${repo_path}"
        git checkout $branch >/dev/null 2>&1
        )
      then
        fetch_error cannot_checkout_branch
      fi
    fi
    [[ -z "${__vcs_failed}" ]] || return 0

    if ! (
      builtin cd "${repo_path}"
      git pull --rebase origin $branch >/dev/null 2>&1
      )
    then
      fetch_error pull_failed
    fi
  else
    mkdir -p "${_target%/*}"
    if git clone --depth 1 ${_uri} "${_target}" >/dev/null 2>&1
    then
      echo "${_uri}" > "${_target}/.uri"
    else
      _uri_https="${_uri/git:\/\//https://}"

      if [[ "${_uri_https}" == "${_uri}" ]]
      then
        fetch_error cannot_clone uri="${_uri}"
      fi

      if [[ -n "${__vcs_failed}" ]]
      then
        return 0
      fi

      __sm.log.debug vcs "git uri: ${_uri} failed, trying: ${_uri_https}"
      if git clone --depth 1 ${_uri_https} "${_target}" >/dev/null 2>&1
      then
        echo "${_uri_https}" > "${_target}/.uri"
      else
        fetch_error cannot_clone uri="${_uri},${_uri_https}"
      fi
    fi
  fi
  [[ -z "${__vcs_failed}" ]] || return 0

  [[ ! -d "${_final_target}" ]] || rm -rf "${_final_target}" || \
    fetch_error cannot_remove path=${_final_target}

  cp -fR "${_target}" "${_final_target}" >/dev/null 2>&1 || \
    fetch_error copy_failed from=${_target} to=${_final_target}
}

